tosca_definitions_version: cloudify_dsl_1_3

# Deploys the "music" app on Azure.
# This file contains all of the Azure-specific parts, and includes
# the IaaS-agnostic YAML file for the application-centric templates.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - http://www.getcloudify.org/spec/azure-plugin/1.4.3/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.5.1/plugin.yaml
  - include/common.yaml

inputs:
  subscription_id:
    type: string
    default: { get_secret: default_azure_subscription_id }
  tenant_id:
    type: string
    default: { get_secret: default_azure_tenant_id }
  client_id:
    type: string
    default: { get_secret: default_azure_client_id }
  client_secret:
    type: string
    default: { get_secret: default_azure_client_secret }
  resource_group:
    type: string
    default: { get_secret: default_azure_resource_group }
  availability_set:
    type: string
    default: { get_secret: default_azure_availability_set }
  location:
    type: string
    default: { get_secret: default_azure_location }
  virtual_network_name:
    type: string
    default: { get_secret: default_azure_virtual_network_name }
  subnet_name:
    type: string
    default: { get_secret: default_azure_subnet_name }
  cidr_mask:
    type: string
    default: 10.10.0.0/16
  storage_account_name:
    type: string
    default: { get_secret: default_azure_storage_account_name }
  image:
    default:
      publisher: { get_secret: default_azure_image_publisher }
      offer: { get_secret: default_azure_image_offer }
      sku: { get_secret: default_azure_image_sku }
      version: { get_secret: default_azure_image_version }
  vm_size:
    type: string
    default: { get_secret: default_azure_vm_size }

  agent_user:
    type: string
    default: ubuntu
  public_keys:
    default:
      - path: {concat:[ '/home/', { get_input: agent_user }, '/.ssh/authorized_keys' ]}
        keyData: { get_secret: default_azure_private_key_data }
  private_key_path:
    type: string
    default: { get_secret: default_private_key_path }
  cfy_network_name:
    type: string
    default: public
  use_public_ip:
    type: boolean
    default: true

dsl_definitions:
  azure_config: &azure_config
    subscription_id: { get_input: subscription_id }
    tenant_id: { get_input: tenant_id }
    client_id: { get_input: client_id }
    client_secret: { get_input: client_secret }

node_templates:
  resource_group:
    type: cloudify.azure.nodes.ResourceGroup
    properties:
      azure_config: *azure_config
      name: { get_input: resource_group }
      location: { get_input: location }

  storage_account:
    type: cloudify.azure.nodes.storage.StorageAccount
    properties:
      azure_config: *azure_config
      name: { get_input: storage_account_name }
      location: { get_input: location }
      resource_config:
        accountType: Standard_LRS
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  availability_set:
    type: cloudify.azure.nodes.compute.AvailabilitySet
    properties:
      azure_config: *azure_config
      name: { get_input: availability_set }
      location: { get_input: location }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  security_group:
    type: cloudify.azure.nodes.network.NetworkSecurityGroup
    properties:
      azure_config: *azure_config
      location: { get_input: location }
      resource_config:
        securityRules:
        - name: http_access
          properties:
            description: HTTP access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 80
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 102
            access: Allow
            direction: Inbound
        # SSH access is required because, as of Azure Plugin 1.4.3, the only
        # supported way to install an agent is the "remote" method (which requires
        # SSH).
        # The sourceAddressPrefix, in a production environment, should be more
        # specific than "*" and only include the address of the manager.
        - name: ssh
          properties:
            description: SSH access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 22
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 103
            access: Allow
            direction: Inbound
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  nic:
    type: cloudify.azure.nodes.network.NetworkInterfaceCard
    properties:
      azure_config: *azure_config
      location: { get_input: location }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.nic_connected_to_network_security_group
      target: security_group
    - type: cloudify.azure.relationships.nic_connected_to_ip_configuration
      target: ip_configuration

  virtual_network:
    type: cloudify.azure.nodes.network.VirtualNetwork
    properties:
      azure_config: *azure_config
      name: { get_input: virtual_network_name }
      location: { get_input: location }
      resource_config:
        addressSpace:
          addressPrefixes:
            - { get_input: cidr_mask }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  subnet:
    type: cloudify.azure.nodes.network.Subnet
    properties:
      azure_config: *azure_config
      name: { get_input: subnet_name }
      resource_config:
        addressPrefix: { get_input: cidr_mask }
    relationships:
    - type: cloudify.azure.relationships.contained_in_virtual_network
      target: virtual_network

  ip_configuration:
    type: cloudify.azure.nodes.network.IPConfiguration
    properties:
      azure_config: *azure_config
      location: { get_input: location }
      resource_config:
        privateIPAllocationMethod: Dynamic
    relationships:
    - type: cloudify.azure.relationships.ip_configuration_connected_to_subnet
      target: subnet
    - type: cloudify.azure.relationships.ip_configuration_connected_to_public_ip
      target: public_ip

  public_ip:
    type: cloudify.azure.nodes.network.PublicIPAddress
    properties:
      azure_config: *azure_config
      location: { get_input: location }
      resource_config:
        publicIPAllocationMethod: Static
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  server:
    type: cloudify.azure.nodes.compute.VirtualMachine
    properties:
      azure_config: *azure_config
      agent_config:
        install_method: remote
        user: { get_input: agent_user }
        key: { get_input: private_key_path }
        port: 22
        # Specifies the name of the "Cloudify Network" through which the agent
        # should connect to the manager.
        # The value provided here must correspond to a key in the /etc/cloudify/ssl/certificate_metadata
        # file, denoting the name of a logical Cloudify Network.
        # The default value of this keyword is "default", which, on the manager,
        # translates to the manager's private IP address.
        network: { get_input: cfy_network_name }
      os_family: linux
      location: { get_input: location }
      # Since we're using the "remote" agent installation method, the manager
      # must have routable access to the agent VM. Unless more complex setup
      # is in place, this can only be done by accessing the VM through its
      # public IP.
      use_public_ip: { get_input: use_public_ip }
      resource_config:
        hardwareProfile:
          vmSize: { get_input: vm_size }
        storageProfile:
          imageReference: { get_input: image}
        osProfile:
          adminUsername: { get_input: agent_user }
          # The password is irrelevant because we use key-based authentication.
          adminPassword: ''
          linuxConfiguration:
            ssh:
              publicKeys: { get_input: public_keys }
            disablePasswordAuthentication: true
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.connected_to_storage_account
      target: storage_account
    - type: cloudify.azure.relationships.connected_to_availability_set
      target: availability_set
    - type: cloudify.azure.relationships.connected_to_nic
      target: nic

outputs:
  url:
    value: { concat: ['http://', { get_attribute: [ server, public_ip ]}] }
